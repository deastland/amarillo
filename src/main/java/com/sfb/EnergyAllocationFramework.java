package com.sfb;

import java.util.LinkedHashMap;
import java.util.Map;

import com.sfb.constants.Constants;
import com.sfb.objects.Ship;
import com.sfb.objects.Shuttle;
import com.sfb.systemgroups.PowerSystems;
import com.sfb.systemgroups.Weapons;
import com.sfb.weapons.Weapon;

/**
 * Build a framework for an individual ship that will allow
 * energy allocation for the systems on that ship.
 * 
 * @author Daniel Eastland
 *
 */
public class EnergyAllocationFramework {
	
	// -------- Available Energy for allocation ------------  //
	private int          availableWarp;					// Warp power generated by the ship
	private int          availableImpulse;				// Impulse power generated by the ship
	private int          availableReactor;				// Non-warp, non-impulse power generated by the ship.
	private int          batteries;						// Number of batteries on the ship.
	private int          availableBatteryEnergy;		// Available power in the batteries.
	
	//---------- Info For energy calculations---------------- //
	private double       availablePhaserCapacitorSize;	// Current size of the phaser capacitor.
	private double       currentPhaserCapacitorEnergy;	// Current energy in the phaser capacitor.
	private double       maxTransporterEnergy;			// Maximum energy that can be dedicated to transporters.

	// Housekeeping costs
	private double       lifeSupportCost;				// Energy needed to activate life support.
	private double       shieldActivationCost;			// Energy needed to have Active shields.
	private int          fireControlCost = 1;			// Energy needed to have active fire control (always 1 energy).
	
	// Energy Spending Values (Amount the player allocates to various systems)
	
	private double       phaserCapacitorEnergy;					// Energy to put into phaser capacitors.
	
	private double       transporterEnergy;						// Energy for transporters.
	private int          tractorEnergy;							// Energy to put into 
	private int          probeEnergy;							// Energy for probes;
	
	private double       movementEnergy;						// Energy for standard movement.
	private double       hetEnergy;								// Energy for HETs
	private double       emEnergy;								// Energy for Erratic Maneuvering
	private int          impulseTac;							// Energy for impulse TAC turns
	private double       warpTac;								// Energy for warp TAC turns

	private double       activateShieldEnergy;					// Energy for activating shields.
	private int          generalReinforcementEnergy;			// Energy for general shield reinforcement.
	private int[]        specificReinforcementEnergy;			// Energy for specific shield reinforcement.
	
	private int          damageControlEnergy;					// Energy for damage control

	private Map<Shuttle, Integer> shuttleEnergy	= new LinkedHashMap<>();	// A map for <shuttle> and <energy committed> for each shuttle.
	private Map<Weapon, Double>   torpEnergy	= new LinkedHashMap<>();	// A map for <weapon> and <energy committed> for each torp weapon
	private Map<Weapon, Double>   droneEnergy	= new LinkedHashMap<>();	// A map for <drone> and <energy committed> for each drone weapon
	
	public EnergyAllocationFramework(Ship ship) {
		// Power available for allocation
		PowerSystems power = ship.getPowerSysetems();
		Weapons    weapons = ship.getWeapons();
		
		lifeSupportCost = ship.isCrippled() ? 0 : Constants.LIFE_SUPPORT_COST[ship.getSizeClass()];
		shieldActivationCost = Constants.ACTIVE_SHIELD_COST[ship.getSizeClass()];
		
		// Available power
		this.availableWarp          = power.getAvailableWarpPower();
		this.availableImpulse       = power.getAvailableApr();
		this.availableReactor       = power.getAvailableReactorPower();
		this.batteries              = power.getAvailableBattery();
		this.availableBatteryEnergy = power.getBatteryPower();
		
		// Size of the phaser capacitor.
		this.availablePhaserCapacitorSize = weapons.getAvailablePhaserCapacitor();
		this.currentPhaserCapacitorEnergy = weapons.getPhaserCapacitorEnergy();
		
		// Transporters
		this.maxTransporterEnergy = ship.getOperationsSystems().getAvailableTrans() * Constants.TRANS_ENERGY;
		
		// Torp Energy
		for (Weapon weapon : weapons.getTorpList()) {
			torpEnergy.put(weapon, new Double(0));
		}

		// Drone Energy
		for (Weapon weapon : weapons.getDroneList()) {
			droneEnergy.put(weapon, new Double(0));
		}

		// Shuttle Energy
		for (Shuttle shuttle : ship.getShuttles().getShuttleInventory()) {
			shuttleEnergy.put(shuttle, new Integer(0));
		}
		
	}

	public double getPhaserCapacitorEnergy() {
		return phaserCapacitorEnergy;
	}

	public void setPhaserCapacitorEnergy(double phaserCapacitorEnergy) {
		this.phaserCapacitorEnergy = phaserCapacitorEnergy;
	}

	public double getTransporterEnergy() {
		return transporterEnergy;
	}

	public void setTransporterEnergy(double transporterEnergy) {
		this.transporterEnergy = transporterEnergy;
	}

	public int getTractorEnergy() {
		return tractorEnergy;
	}

	public void setTractorEnergy(int tractorEnergy) {
		this.tractorEnergy = tractorEnergy;
	}

	public double getActivateShieldEnergy() {
		return activateShieldEnergy;
	}

	public void setActivateShieldEnergy(double activateShieldEnergy) {
		this.activateShieldEnergy = activateShieldEnergy;
	}

	public int getGeneralReinforcementEnergy() {
		return generalReinforcementEnergy;
	}

	public void setGeneralReinforcementEnergy(int generalReinforcementEnergy) {
		this.generalReinforcementEnergy = generalReinforcementEnergy;
	}

	public int[] getSpecificReinforcementEnergy() {
		return specificReinforcementEnergy;
	}

	public void setSpecificReinforcementEnergy(
			int[] specificReinforcementEnergy) {
		this.specificReinforcementEnergy = specificReinforcementEnergy;
	}

	public int getProbeEnergy() {
		return probeEnergy;
	}

	public void setProbeEnergy(int probeEnergy) {
		this.probeEnergy = probeEnergy;
	}

	public double getMovementEnergy() {
		return movementEnergy;
	}

	public void setMovementEnergy(double movementEnergy) {
		this.movementEnergy = movementEnergy;
	}

	public double getHetEnergy() {
		return hetEnergy;
	}

	public void setHetEnergy(double hetEnergy) {
		this.hetEnergy = hetEnergy;
	}

	public double getEmEnergy() {
		return emEnergy;
	}

	public void setEmEnergy(double emEnergy) {
		this.emEnergy = emEnergy;
	}

	public int getImpulseTac() {
		return impulseTac;
	}

	public void setImpulseTac(int impulseTac) {
		this.impulseTac = impulseTac;
	}

	public double getWarpTac() {
		return warpTac;
	}

	public void setWarpTac(double warpTac) {
		this.warpTac = warpTac;
	}

	public int getDamageControlEnergy() {
		return damageControlEnergy;
	}

	public void setDamageControlEnergy(int damageControlEnergy) {
		this.damageControlEnergy = damageControlEnergy;
	}
	
}
